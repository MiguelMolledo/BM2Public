//
// zooChangeRoo
//
// Created by Hamish McKenzie mel@mel.macaronikazoo.com
// Created : 09 January 2002
//
// Description:
// will change the rotation order of all selected objects
// without mangling their orientation.  The script even
// works on objects that have been animated as well.
//
// Usage:
// this script takes one parameter - the new rotation order
// example:  zooChangeRoo zxy;
// will change all selected objects rotation order to zxy
//
//
// Hamish McKenzie ©2004...
// macaroniKazoo productions ©2004...


global proc zooChangeRoo( string $newRoo ) {
	string $selObjs[] = `ls -sl`;
	string $staticObjs[];
	string $animatedObjs[];
	string $rotateOrders[] = { "xyz","yzx","zxy","xzy","yxz ","zyx" };
	float $keyTimeList[];
	float $initialTime = `currentTime -q`;

	//source all dependencies
	string $deps[] = `zooChangeRooDependencies -scripts`;
	for( $script in $deps ) if( `exists $script` ) eval( "source " + $script );

	for( $obj in $selObjs ) if( size(`keyframe -q -tc $obj`)) $animatedObjs[( `size $animatedObjs` )] = $obj;
		else $staticObjs[( `size $staticObjs` )] = $obj;

	$keyTimeList = `keyframe -q -tc $animatedObjs`;
	$keyTimeList = `sort $keyTimeList`;
	$keyTimeList = `zooUtilsRemoveDupeArrayItems_float $keyTimeList`;
	for( $n = 0; $n <= `size $keyTimeList`; $n++ ) {
		int $t = $keyTimeList[$n];
		currentTime $t;
		for( $i = 0; $i < `size $animatedObjs`; $i++ ) {
			string $obj = $animatedObjs[$i];
			int $oldRooAttr = `getAttr ( $obj + ".rotateOrder" )`;
			string $oldRoo = $rotateOrders[$oldRooAttr];

			//make sure both the target object exist AND the object's source has a key on this frame
			if( `keyframe -t $t -q -kc $obj` ) {
				xform -p 1 -roo $newRoo $obj;
				xform -p 0 -roo $oldRoo $obj;
				}
			}
		}

	xform -p 1 -roo $newRoo $staticObjs;
	xform -p 0 -roo $newRoo $animatedObjs;

	currentTime $initialTime;
	filterCurve;
	}


global proc float[] zooChangeRooRemoveDuplicateTimes( float $array[] ) {
	float $returnArray[];
	float $prevVal = $array[0];

	$returnArray[0] = $array[0];
	for( $n = 1; $n < `size $array`; $n++ ) {
		if( $prevVal != $array[$n] ) $returnArray[( `size $returnArray` )] = $array[$n];
		$prevVal = $array[$n];
		}

	return $returnArray;
	}

global proc string zooChangeRooInfo ( string $function ) {
	string $creationDate = "10 January 2004";
	string $lastRevision = "12 January 2004";
	string $revisionHistory = "v1.02  12-01-04\nFIX: now works on both animated and static objects\n\nv1.00  10-01-04\nNEW: initial version";
	string $info = "";
	float $currentVersion = 1.02;

	if ( $function == "created" ) $info = $creationDate;
	if ( $function == "modified" ) $info = $lastRevision;
	if ( $function == "history" ) $info = $revisionHistory;
	if ( $function == "version" ) $info = $currentVersion;
	return $info;
	}


global proc string[] zooChangeRooDependencies( string $mode ) {
	string $melDependencies[];
	string $iconDependencies[];

	$melDependencies[( `size $melDependencies` )] = "zooUtils";

	if( $mode == "-scripts" ) return $melDependencies;
	if( $mode == "-icons" ) return $iconDependencies;
	}


//zoo.end